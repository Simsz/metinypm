// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Theme {
  YELLOW    // #FFCC00 to #FFA500 (Default)
  BLUE      // #60A5FA to #2563EB
  GREEN     // #34D399 to #059669
  PURPLE    // #A855F7 to #6D28D9
  DARK      // #1F2937 to #1F2937
  DAISY     // #FDFBF7 to #FFF9E5
  ROSE      // #FDF2F8 to #FBCFE8
  SLATE     // #475569 to #334155
}

enum ContentType {
  LINK    // Regular link (default for migrated content)
  TITLE   // Title box
  DIVIDER // Divider line 
  TEXT    // Description/text box
}

model Content {
  id          String      @id @default(cuid())
  type        ContentType @default(LINK)
  title       String?
  url         String?
  text        String?
  emoji       String?
  order       Int         @default(0)
  enabled     Boolean     @default(true)
  clicks      Int         @default(0)
  userId      String
  user        User        @relation("UserContent", fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Link {
  id        String   @id @default(cuid())
  title     String
  url       String
  order     Int      @default(0)
  emoji     String?
  enabled   Boolean  @default(true)
  clicks    Int      @default(0)
  userId    String
  user      User     @relation("UserLinks", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  theme         Theme     @default(YELLOW)
  pageTitle     String?
  pageDesc      String?
  accounts      Account[]
  sessions      Session[]
  links         Link[]    @relation("UserLinks")
  content       Content[] @relation("UserContent")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}